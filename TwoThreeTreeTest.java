import org.junit.Test;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import static org.junit.Assert.*;

public class TwoThreeTreeTest {

    @Test
    public void singleNodeTree()
    {
        TwoThreeTree<Integer> t = new TwoThreeTree<>();
        int val = 9;
        t.insert(val);
        String expected = "9";

        assertEquals(expected, t.search(val));
        val = 8;
        assertEquals(expected, t.search(val));
        val = 10;
        assertEquals(expected, t.search(val));

        val = 15;
        t.insert(val);
        expected = "9 15";
        val = 9;
        assertEquals(expected, t.search(val));
        val = 8;
        assertEquals(expected, t.search(val));
        val = 10;
        assertEquals(expected, t.search(val));
        val = 15;
        assertEquals(expected, t.search(val));
        val = 18;
        assertEquals(expected, t.search(val));

        t = new TwoThreeTree<>();
        val = 15;
        t.insert(val);
        val = 9;
        t.insert(val);
        val = 9;
        assertEquals(expected, t.search(val));
        val = 8;
        assertEquals(expected, t.search(val));
        val = 10;
        assertEquals(expected, t.search(val));
        val = 15;
        assertEquals(expected, t.search(val));
        val = 18;
        assertEquals(expected, t.search(val));
    }

    @Test
    public void oneSplitLeft()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(9);
        t.insert(15);
        t.insert(1);

        String expected = "9";
        assertEquals(expected, t.search(9));
        expected = "15";
        assertEquals(expected, t.search(15));
        assertEquals(expected, t.search(17));
        assertEquals(expected, t.search(11));

        expected = "1";
        assertEquals(expected, t.search(1));
        assertEquals(expected, t.search(0));
        assertEquals(expected, t.search(3));
    }

    @Test
    public void oneSplitRight()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(1);
        t.insert(9);
        t.insert(15);

        String expected = "9";
        assertEquals(expected, t.search(9));
        expected = "15";
        assertEquals(expected, t.search(15));
        assertEquals(expected, t.search(17));
        assertEquals(expected, t.search(11));

        expected = "1";
        assertEquals(expected, t.search(1));
        assertEquals(expected, t.search(0));
        assertEquals(expected, t.search(3));
    }

    @Test
    public void addAllTest()
    {
        TwoThreeTree<Character> t = new TwoThreeTree<>();
        char[] a = {'o', 't', 's', 'd', 'y', 'h', 'u', 'u', 'g', 'f', 'p', 'e', 'z', 't', 'b', 'v'};
        HashSet<Character> h = new HashSet<>();
        for (char q: a)
            h.add(q);
        ArrayList<Character> b = new ArrayList<>();
        for (char c: a)
            b.add(c);
        t.addAll(b);
        assertEquals("f s", t.search('f'));
        assertEquals("f s", t.search('s'));
        assertEquals("d", t.search('d'));
        assertEquals("h", t.search('h'));
        assertEquals("u y", t.search('u'));
        assertEquals("b", t.search('b'));
        assertEquals("e", t.search('e'));
        assertEquals("g", t.search('g'));
        assertEquals("o p", t.search('p'));
        assertEquals("o p", t.search('o'));
        assertEquals("t", t.search('t'));
        assertEquals("u y", t.search('y'));
        assertEquals("v", t.search('v'));
        assertEquals("z", t.search('z'));
        assertEquals(h.size(), t.size());
    }

    @Test
    public void preliminaryTest1()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(1);
        t.insert(2);
        t.insert(3);
        t.insert(5);
        t.insert(6);
        t.insert(7);
        t.insert(0);
        t.insert(4);
        assertEquals("2 5", t.search(2));
        assertEquals("2 5", t.search(5));
        assertEquals("0 1", t.search(1));
        assertEquals("0 1", t.search(0));
        assertEquals("3 4", t.search(3));
        assertEquals("3 4", t.search(4));
        assertEquals("6 7", t.search(6));
        assertEquals("6 7", t.search(7));
    }

    @Test
    public void preliminaryTest2()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(0);
        t.insert(1);
        t.insert(2);
        t.insert(3);
        t.insert(-1);
        t.insert(-2);
        assertEquals("-1 1", t.search(1));
        assertEquals("-1 1", t.search(-1));
        assertEquals("0", t.search(0));
        assertEquals("2 3", t.search(2));
        assertEquals("-2", t.search(-2));

        t = new TwoThreeTree();
        t.insert(2);
        t.insert(3);
        t.insert(8);
        t.insert(1);
        t.insert(7);
        t.insert(0);
        assertEquals("1 3", t.search(3));
        assertEquals("2", t.search(2));
        assertEquals("1 3", t.search(1));
        assertEquals("7 8", t.search(8));
        assertEquals("7 8", t.search(7));
        assertEquals("0", t.search(0));
        assertEquals("7 8", t.search(4));
        assertEquals("0", t.search(-1));
    }

    @Test
    public void testDuplicates()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(1);
        t.insert(9);
        t.insert(15);
        t.insert(13);
        t.insert(20);
        t.insert(7);
        t.insert(4);
        t.insert(1);
        t.insert(9);
        t.insert(15);
        t.insert(1);
        t.insert(9);
        t.insert(15);
        t.insert(13);
        t.insert(20);
        t.insert(7);
        t.insert(4);
        t.insert(13);
        t.insert(20);
        t.insert(7);
        t.insert(4);

        assertEquals(7, t.size());
        String expected = "9";
        assertEquals(expected, t.search(9));
        expected = "4";
        assertEquals(expected, t.search(4));
        expected = "15";
        assertEquals(expected, t.search(15));

        expected = "13";
        assertEquals(expected, t.search(12));
        assertEquals(expected, t.search(13));
        assertEquals(expected, t.search(14));
        expected = "20";
        assertEquals(expected, t.search(19));
        assertEquals(expected, t.search(20));
        assertEquals(expected, t.search(21));

        expected = "1";
        assertEquals(expected, t.search(1));
        assertEquals(expected, t.search(0));
        assertEquals(expected, t.search(3));

        expected = "7";
        assertEquals(expected, t.search(6));
        assertEquals(expected, t.search(7));
        assertEquals(expected, t.search(8));
    }

    @Test
    public void smallerButThoroughTest()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(2);
        t.insert(3);
        assertEquals("2 3", t.search(2));
        assertEquals("2 3", t.search(3));
        t.insert(4);
        assertEquals("2", t.search(2));
        assertEquals("3", t.search(3));
        assertEquals("4", t.search(4));
        t.insert(1);
        t.insert(7);
        assertEquals("3", t.search(3));
        assertEquals("1 2", t.search(1));
        assertEquals("1 2", t.search(2));
        assertEquals("4 7", t.search(4));
        assertEquals("4 7", t.search(7));
        t.insert(8);
        assertEquals("3 7", t.search(3));
        assertEquals("3 7", t.search(7));
        assertEquals("4", t.search(4));
        t.insert(5);
        assertEquals("4 5", t.search(5));
        t.insert(9);
        assertEquals("8 9", t.search(9));
        t.insert(0);
        assertEquals("3", t.search(3));
        assertEquals("7", t.search(7));
        assertEquals("1", t.search(1));
        assertEquals("0", t.search(0));
        assertEquals("2", t.search(2));
        assertEquals("4 5", t.search(4));
        assertEquals("4 5", t.search(5));
        assertEquals("8 9", t.search(9));
        assertEquals("8 9", t.search(8));
    }

    @Test
    public void stringTest()
    {
        TwoThreeTree<String> t = new TwoThreeTree<>();

        t.insert("a");
        t.insert("b");
        t.insert("c");
        t.insert("d");
        t.insert("e");
        t.insert("f");
        t.insert("g");
        t.insert("h");
        t.insert("i");
        t.insert("j");
        assertEquals(t.search("d"), "d");
        assertEquals(t.search("a"), "a");
        assertEquals(t.search("b"), "b");
        assertEquals(t.search("f"), "f h");
        assertEquals(t.search("h"), "f h");
        assertEquals(t.search("e"), "e");
        assertEquals(t.search("g"), "g");
        assertEquals(t.search("i"), "i j");
        assertEquals(t.search("j"), "i j");
    }

    @Test
    public void largerInputTest()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(1);
        t.insert(2);
        t.insert(3);
        t.insert(4);
        t.insert(5);
        t.insert(6);
        t.insert(7);
        t.insert(8);
        t.insert(9);
        t.insert(10);
        t.insert(11);
        assertEquals("4 8", t.search(4));
        assertEquals("2", t.search(2));
        assertEquals("6", t.search(6));
        assertEquals("1", t.search(1));
        assertEquals("3", t.search(3));
        assertEquals("5", t.search(5));
        assertEquals("7", t.search(7));
        assertEquals("9", t.search(9));
        assertEquals("10", t.search(10));
        assertEquals("11", t.search(11));
        t.insert(12);
        t.insert(13);
        t.insert(14);
        assertEquals("4 8", t.search(4));
        assertEquals("4 8", t.search(8));
        assertEquals("2", t.search(2));
        assertEquals("6", t.search(6));
        assertEquals("1", t.search(1));
        assertEquals("3", t.search(3));
        assertEquals("5", t.search(5));
        assertEquals("7", t.search(7));
        assertEquals("9", t.search(9));
        assertEquals("10 12", t.search(10));
        assertEquals("10 12", t.search(12));
        assertEquals("11", t.search(11));
        assertEquals("13 14", t.search(13));
        assertEquals("13 14", t.search(14));
        assertEquals("13 14", t.search(15));
        assertEquals("1", t.search(-1));
    }

    @Test
    public void traversalTest()
    {
        TwoThreeTree<Integer> t = new TwoThreeTree<>();
        t.insert(2);
        t.insert(3);
        t.insert(4);
        t.insert(1);
        t.insert(7);
        t.insert(8);
        t.insert(5);
        t.insert(9);
        t.insert(0);
        for (Integer aT : (Iterable<Integer>) t)
            System.out.print(aT + " ");
    }

    @Test
    public void megaTest()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(60);
        t.insert(46);
        t.insert(16);
        t.insert(32);
        t.insert(20);
        assertEquals("60", t.search(60));
        assertEquals("20 46", t.search(20));
        assertEquals("32", t.search(32));
        t.insert(38);
        t.insert(81);
        t.insert(55);
        t.insert(85);
        assertEquals("81 85", t.search(85));
        t.insert(0);
        t.insert(83);
        t.insert(12);
        t.insert(89);
        t.insert(40);
        t.insert(70);
        assertEquals("60 83", t.search(83));
        assertEquals("70 81", t.search(81));
        t.insert(42);
        t.insert(80);
        t.insert(69);
        t.insert(30);
        assertEquals("46", t.search(46));
        t.insert(91);
        t.insert(75);
        t.insert(90);
        assertEquals("90 91", t.search(90));
        assertEquals("40 42", t.search(42));
        t.insert(56);
        assertEquals("55 56", t.search(55));
        t.insert(53);
        t.insert(52);
        assertEquals("20", t.search(20));
        assertEquals("52 53", t.search(53));
        assertEquals("30 32", t.search(32));
        t.insert(58);
        t.insert(77);
        t.insert(3);
        assertEquals("85", t.search(85));
        assertEquals("83 89", t.search(89));
        t.insert(71);
        t.insert(64);
        t.insert(17);
        assertEquals("85", t.search(85));
        t.insert(9);
        assertEquals("56 58", t.search(58));
        assertEquals("16 17", t.search(16));
        t.insert(14);
        t.insert(43);
        assertEquals("56 58", t.search(58));
        t.insert(86);
        t.insert(22);
        t.insert(6);
        t.insert(24);
        t.insert(37);
        t.insert(76);
        t.insert(49);
        t.insert(98);
        t.insert(54);
        t.insert(59);
        t.insert(31);
        t.insert(93);
        t.insert(19);
        assertEquals("52", t.search(52));
        t.insert(13);
        assertEquals("70 75", t.search(70));
        t.insert(47);
        t.insert(10);
        t.insert(35);
        assertEquals("17 19", t.search(19));
        assertEquals("38", t.search(38));
        assertEquals("16", t.search(16));
        assertEquals("17 19", t.search(19));
        t.insert(94);
        assertEquals("6", t.search(6));
        assertEquals("76 77", t.search(77));
        assertEquals("46", t.search(46));
        t.insert(72);
        t.insert(78);
        t.insert(61);
        t.insert(65);
        assertEquals("13 14", t.search(13));
        assertEquals("61", t.search(61));
        assertEquals("65 69", t.search(69));
        assertEquals("47 49", t.search(47));
        t.insert(57);
        t.insert(68);
        assertEquals("38", t.search(38));
        assertEquals("77", t.search(77));
        assertEquals("3 9", t.search(9));
        assertEquals("98", t.search(98));
        t.insert(21);
        t.insert(95);
        t.insert(50);
        assertEquals("85 86", t.search(85));
        t.insert(2);
        assertEquals("46", t.search(46));
        assertEquals("31", t.search(31));
        assertEquals("76", t.search(76));
        t.insert(96);
        assertEquals("42", t.search(42));
        t.insert(48);
        t.insert(4);
        t.insert(41);
        t.insert(73);
        assertEquals("12", t.search(12));
        t.insert(29);
        t.insert(5);
        assertEquals("93", t.search(93));
        t.insert(88);
        t.insert(99);
        t.insert(51);
        t.insert(11);
        t.insert(33);
        t.insert(92);
        t.insert(82);
        t.insert(36);
        t.insert(26);
        t.insert(100);
        t.insert(45);
        assertEquals("36 37", t.search(36));
        assertEquals("47 48", t.search(47));
        t.insert(8);
        t.insert(28);
        t.insert(27);
        t.insert(25);
        t.insert(67);
        assertEquals("10 11", t.search(10));
        assertEquals("28", t.search(28));
        t.insert(39);
        t.insert(23);
        t.insert(1);
        t.insert(62);
        assertEquals("29", t.search(29));
        assertEquals("89 94", t.search(89));
        t.insert(84);
        assertEquals("68 75", t.search(75));
        t.insert(44);
        t.insert(87);
        t.insert(63);
        t.insert(18);
        t.insert(34);
        t.insert(66);
        t.insert(97);
        t.insert(7);
        assertEquals("49 52", t.search(49));
        assertEquals("60", t.search(60));
        t.insert(79);
        t.insert(15);
        t.insert(74);
        assertEquals("60", t.search(60));
        assertEquals("46", t.search(46));
        assertEquals("16", t.search(16));
        assertEquals("32 35", t.search(32));
        assertEquals("20", t.search(20));
        assertEquals("38 42", t.search(38));
        assertEquals("81 82", t.search(81));
        assertEquals("55", t.search(55));
        assertEquals("84 85", t.search(85));
        assertEquals("0", t.search(0));
        assertEquals("83 86", t.search(83));
        assertEquals("12", t.search(12));
        assertEquals("89 94", t.search(89));
        assertEquals("40", t.search(40));
        assertEquals("70 72", t.search(70));
        assertEquals("38 42", t.search(42));
        assertEquals("80", t.search(80));
        assertEquals("69", t.search(69));
        assertEquals("30", t.search(30));
        assertEquals("91", t.search(91));
        assertEquals("75", t.search(75));
        assertEquals("90", t.search(90));
        assertEquals("56 57", t.search(56));
        assertEquals("53 54", t.search(53));
        assertEquals("49 52", t.search(52));
        assertEquals("58", t.search(58));
        assertEquals("77", t.search(77));
        assertEquals("1 3", t.search(3));
        assertEquals("71", t.search(71));
        assertEquals("64", t.search(64));
        assertEquals("17", t.search(17));
        assertEquals("7 9", t.search(9));
        assertEquals("14", t.search(14));
        assertEquals("43", t.search(43));
        assertEquals("83 86", t.search(86));
        assertEquals("22 24", t.search(22));
        assertEquals("6", t.search(6));
        assertEquals("22 24", t.search(24));
        assertEquals("36 37", t.search(37));
        assertEquals("76", t.search(76));
        assertEquals("49 52", t.search(49));
        assertEquals("97 98", t.search(98));
        assertEquals("53 54", t.search(54));
        assertEquals("59", t.search(59));
        assertEquals("31", t.search(31));
        assertEquals("92 93", t.search(93));
        assertEquals("19", t.search(19));
        assertEquals("13", t.search(13));
        assertEquals("47 48", t.search(47));
        assertEquals("10 11", t.search(10));
        assertEquals("32 35", t.search(35));
        assertEquals("89 94", t.search(94));
        assertEquals("70 72", t.search(72));
        assertEquals("78 79", t.search(78));
        assertEquals("61", t.search(61));
        assertEquals("65", t.search(65));
        assertEquals("56 57", t.search(57));
        assertEquals("68", t.search(68));
        assertEquals("21", t.search(21));
        assertEquals("95", t.search(95));
        assertEquals("50 51", t.search(50));
        assertEquals("2", t.search(2));
        assertEquals("96 99", t.search(96));
        assertEquals("47 48", t.search(48));
        assertEquals("4", t.search(4));
        assertEquals("41", t.search(41));
        assertEquals("73 74", t.search(73));
        assertEquals("29", t.search(29));
        assertEquals("5", t.search(5));
        assertEquals("87 88", t.search(88));
        assertEquals("96 99", t.search(99));
        assertEquals("50 51", t.search(51));
        assertEquals("10 11", t.search(11));
        assertEquals("33 34", t.search(33));
        assertEquals("92 93", t.search(92));
        assertEquals("81 82", t.search(82));
        assertEquals("36 37", t.search(36));
        assertEquals("26", t.search(26));
        assertEquals("100", t.search(100));
        assertEquals("45", t.search(45));
        assertEquals("8", t.search(8));
        assertEquals("28", t.search(28));
        assertEquals("27", t.search(27));
        assertEquals("25", t.search(25));
        assertEquals("67", t.search(67));
        assertEquals("39", t.search(39));
        assertEquals("23", t.search(23));
        assertEquals("1 3", t.search(1));
        assertEquals("62", t.search(62));
        assertEquals("84 85", t.search(84));
        assertEquals("44", t.search(44));
        assertEquals("87 88", t.search(87));
        assertEquals("63", t.search(63));
        assertEquals("18", t.search(18));
        assertEquals("33 34", t.search(34));
        assertEquals("66", t.search(66));
        assertEquals("97 98", t.search(97));
        assertEquals("7 9", t.search(7));
        assertEquals("78 79", t.search(79));
        assertEquals("15", t.search(15));
        assertEquals("73 74", t.search(74));
    }

    @Test
    public void ultimateTest()
    {
        TwoThreeTree t = new TwoThreeTree();
        t.insert(35);
        t.insert(32);
        t.insert(96);
        assertEquals("96", t.search(96));
        t.insert(57);
        t.insert(70);
        assertEquals("35 70", t.search(70));
        t.insert(28);
        assertEquals("28 32", t.search(28));
        assertEquals("57", t.search(57));
        t.insert(4);
        t.insert(98);
        t.insert(86);
        assertEquals("86", t.search(86));
        assertEquals("98", t.search(98));
        assertEquals("4", t.search(4));
        assertEquals("32", t.search(32));
        t.insert(82);
        t.insert(39);
        t.insert(65);
        t.insert(93);
        t.insert(42);
        t.insert(58);
        assertEquals("58 65", t.search(58));
        t.insert(61);
        assertEquals("57 61", t.search(61));
        assertEquals("39 42", t.search(42));
        assertEquals("93", t.search(93));
        t.insert(21);
        assertEquals("4 21", t.search(21));
        assertEquals("65", t.search(65));
        assertEquals("39 42", t.search(39));
        t.insert(94);
        assertEquals("93 94", t.search(94));
        t.insert(8);
        t.insert(66);
        assertEquals("65 66", t.search(66));
        t.insert(62);
        assertEquals("62", t.search(62));
        t.insert(17);
        t.insert(31);
        t.insert(69);
        t.insert(64);
        t.insert(15);
        assertEquals("15", t.search(15));
        t.insert(11);
        assertEquals("11 15", t.search(11));
        t.insert(51);
        assertEquals("51", t.search(51));
        t.insert(24);
        t.insert(99);
        assertEquals("98 99", t.search(99));
        assertEquals("21 24", t.search(24));
        assertEquals("62 64", t.search(64));
        t.insert(53);
        assertEquals("51 53", t.search(53));
        assertEquals("66 69", t.search(69));
        assertEquals("31 32", t.search(31));
        t.insert(72);
        assertEquals("72 82", t.search(72));
        assertEquals("17 35", t.search(17));
        assertEquals("8", t.search(8));
        assertEquals("72 82", t.search(82));
        t.insert(81);
        t.insert(45);
        t.insert(5);
        assertEquals("4 5", t.search(5));
        assertEquals("45", t.search(45));
        assertEquals("81", t.search(81));
        t.insert(55);
        assertEquals("53 55", t.search(55));
        t.insert(84);
        assertEquals("82 84", t.search(84));
        t.insert(85);
        t.insert(46);
        t.insert(10);
        assertEquals("10", t.search(10));
        t.insert(19);
        t.insert(9);
        assertEquals("9 10", t.search(9));
        t.insert(38);
        assertEquals("38 39", t.search(38));
        t.insert(78);
        assertEquals("72 78", t.search(78));
        assertEquals("19", t.search(19));
        t.insert(88);
        t.insert(56);
        assertEquals("56", t.search(56));
        assertEquals("88", t.search(88));
        assertEquals("45 46", t.search(46));
        assertEquals("85", t.search(85));
        t.insert(27);
        t.insert(79);
        t.insert(90);
        t.insert(76);
        assertEquals("72 76", t.search(76));
        assertEquals("88 90", t.search(90));
        t.insert(71);
        assertEquals("71", t.search(71));
        t.insert(29);
        t.insert(12);
        assertEquals("12 15", t.search(12));
        assertEquals("29", t.search(29));
        t.insert(91);
        t.insert(20);
        assertEquals("19 20", t.search(20));
        assertEquals("91", t.search(91));
        assertEquals("79", t.search(79));
        t.insert(16);
        t.insert(63);
        assertEquals("63 65", t.search(63));
        assertEquals("16", t.search(16));
        t.insert(83);
        t.insert(49);
        t.insert(47);
        assertEquals("47 49", t.search(47));
        t.insert(59);
        assertEquals("58 59", t.search(59));
        assertEquals("47 49", t.search(49));
        assertEquals("82 83", t.search(83));
        t.insert(0);
        t.insert(92);
        t.insert(26);
        assertEquals("21 26", t.search(26));
        t.insert(25);
        assertEquals("24 25", t.search(25));
        assertEquals("91 92", t.search(92));
        t.insert(95);
        assertEquals("94 95", t.search(95));
        assertEquals("0", t.search(0));
        assertEquals("27", t.search(27));
        t.insert(1);
        assertEquals("0 1", t.search(1));
        t.insert(77);
        t.insert(18);
        t.insert(40);
        assertEquals("40", t.search(40));
        assertEquals("18", t.search(18));
        t.insert(13);
        t.insert(67);
        assertEquals("67", t.search(67));
        assertEquals("12 13", t.search(13));
        assertEquals("76 77", t.search(77));
        t.insert(89);
        assertEquals("88 89", t.search(89));
        t.insert(52);
        t.insert(80);
        t.insert(41);
        assertEquals("40 41", t.search(41));
        assertEquals("79 80", t.search(80));
        assertEquals("52 53", t.search(52));
        t.insert(97);
        t.insert(75);
        assertEquals("75", t.search(75));
        assertEquals("97", t.search(97));
        t.insert(33);
        assertEquals("32 33", t.search(33));
        t.insert(73);
        assertEquals("73 75", t.search(73));
        t.insert(44);
        assertEquals("44 45", t.search(44));
        t.insert(37);
        assertEquals("37 38", t.search(37));
        t.insert(23);
        t.insert(30);
        assertEquals("29 30", t.search(30));
        t.insert(7);
        assertEquals("5 7", t.search(7));
        assertEquals("23", t.search(23));
        t.insert(48);
        assertEquals("46 48", t.search(48));
        t.insert(36);
        t.insert(22);
        t.insert(2);
        t.insert(34);
        assertEquals("34", t.search(34));
        assertEquals("2", t.search(2));
        assertEquals("22 23", t.search(22));
        t.insert(6);
        assertEquals("6 8", t.search(6));
        assertEquals("36", t.search(36));
        t.insert(100);
        t.insert(14);
        assertEquals("14", t.search(14));
        assertEquals("99 100", t.search(100));
        t.insert(74);
        t.insert(87);
        assertEquals("87", t.search(87));
        assertEquals("72 74", t.search(74));
        t.insert(43);
        t.insert(50);
        assertEquals("49 50", t.search(50));
        assertEquals("43", t.search(43));
        t.insert(54);
        t.insert(68);
        t.insert(60);
        assertEquals("60", t.search(60));
        t.insert(3);
        assertEquals("35 61", t.search(35));
        assertEquals("32", t.search(32));
        assertEquals("96 98", t.search(96));
        assertEquals("57 59", t.search(57));
        assertEquals("70 81", t.search(70));
        assertEquals("21 28", t.search(28));
        assertEquals("4 11", t.search(4));
        assertEquals("96 98", t.search(98));
        assertEquals("86 93", t.search(86));
        assertEquals("82 83", t.search(82));
        assertEquals("37 39", t.search(39));
        assertEquals("65", t.search(65));
        assertEquals("86 93", t.search(93));
        assertEquals("42", t.search(42));
        assertEquals("58", t.search(58));
        assertEquals("35 61", t.search(61));
        assertEquals("21 28", t.search(21));
        assertEquals("94 95", t.search(94));
        assertEquals("6 8", t.search(8));
        assertEquals("66", t.search(66));
        assertEquals("62", t.search(62));
        assertEquals("17", t.search(17));
        assertEquals("31 33", t.search(31));
        assertEquals("68 69", t.search(69));
        assertEquals("64", t.search(64));
        assertEquals("13 15", t.search(15));
        assertEquals("4 11", t.search(11));
        assertEquals("51 55", t.search(51));
        assertEquals("24 26", t.search(24));
        assertEquals("99 100", t.search(99));
        assertEquals("53", t.search(53));
        assertEquals("72 74", t.search(72));
        assertEquals("70 81", t.search(81));
        assertEquals("45", t.search(45));
        assertEquals("5", t.search(5));
        assertEquals("51 55", t.search(55));
        assertEquals("84", t.search(84));
        assertEquals("85", t.search(85));
        assertEquals("46", t.search(46));
        assertEquals("9 10", t.search(10));
        assertEquals("19", t.search(19));
        assertEquals("9 10", t.search(9));
        assertEquals("38", t.search(38));
        assertEquals("78", t.search(78));
        assertEquals("88 90", t.search(88));
        assertEquals("56", t.search(56));
        assertEquals("27", t.search(27));
        assertEquals("79 80", t.search(79));
        assertEquals("88 90", t.search(90));
        assertEquals("76", t.search(76));
        assertEquals("71", t.search(71));
        assertEquals("29 30", t.search(29));
        assertEquals("12", t.search(12));
        assertEquals("91 92", t.search(91));
        assertEquals("20", t.search(20));
        assertEquals("16", t.search(16));
        assertEquals("63", t.search(63));
        assertEquals("82 83", t.search(83));
        assertEquals("49 50", t.search(49));
        assertEquals("47", t.search(47));
        assertEquals("57 59", t.search(59));
        assertEquals("0", t.search(0));
        assertEquals("91 92", t.search(92));
        assertEquals("24 26", t.search(26));
        assertEquals("25", t.search(25));
        assertEquals("94 95", t.search(95));
        assertEquals("1", t.search(1));
        assertEquals("77", t.search(77));
        assertEquals("18", t.search(18));
        assertEquals("40 41", t.search(40));
        assertEquals("13 15", t.search(13));
        assertEquals("67", t.search(67));
        assertEquals("89", t.search(89));
        assertEquals("52", t.search(52));
        assertEquals("79 80", t.search(80));
        assertEquals("40 41", t.search(41));
        assertEquals("97", t.search(97));
        assertEquals("75", t.search(75));
        assertEquals("31 33", t.search(33));
        assertEquals("73", t.search(73));
        assertEquals("44", t.search(44));
        assertEquals("37 39", t.search(37));
        assertEquals("22 23", t.search(23));
        assertEquals("29 30", t.search(30));
        assertEquals("7", t.search(7));
        assertEquals("48", t.search(48));
        assertEquals("36", t.search(36));
        assertEquals("22 23", t.search(22));
        assertEquals("2 3", t.search(2));
        assertEquals("34", t.search(34));
        assertEquals("6 8", t.search(6));
        assertEquals("99 100", t.search(100));
        assertEquals("14", t.search(14));
        assertEquals("72 74", t.search(74));
        assertEquals("87", t.search(87));
        assertEquals("43", t.search(43));
        assertEquals("49 50", t.search(50));
        assertEquals("54", t.search(54));
        assertEquals("68 69", t.search(68));
        assertEquals("60", t.search(60));
        assertEquals("2 3", t.search(3));
    }
}